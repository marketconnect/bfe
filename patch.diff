--- a/bfe/api/handlers.go
+++ b/bfe/api/handlers.go
@@ -62,7 +62,29 @@
 		return
 	}
 
-	c.JSON(http.StatusCreated, gin.H{"message": "user created successfully", "user_id": user.ID})
+	// Return the original password in the response for the admin to copy
+	c.JSON(http.StatusCreated, gin.H{"message": "user created successfully", "user_id": user.ID, "password": req.Password})
+}
+
+func (h *Handler) ResetUserPasswordHandler(c *gin.Context) {
+	userIDStr := c.Param("id")
+	userID, err := strconv.ParseUint(userIDStr, 10, 32)
+	if err != nil {
+		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid user ID"})
+		return
+	}
+
+	var req models.ResetPasswordRequest
+	if err := c.ShouldBindJSON(&req); err != nil {
+		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid request", "details": err.Error()})
+		return
+	}
+
+	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
+	if err != nil {
+		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to hash password"})
+		return
+	}
+
+	if err := h.Store.UpdateUserPassword(uint(userID), string(hashedPassword)); err != nil {
+		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to update password", "details": err.Error()})
+		return
+	}
+
+	c.JSON(http.StatusOK, gin.H{"message": "password updated successfully", "password": req.Password})
 }
 
 func (h *Handler) ListUsersHandler(c *gin.Context) {
--- a/bfe/db/store.go
+++ b/bfe/db/store.go
@@ -12,6 +12,7 @@
 	GetUserByUsername(username string) (*models.User, error)
 	GetAllUsers() ([]models.User, error)
 	AssignPermission(permission *models.UserPermission) error
+	UpdateUserPassword(userID uint, passwordHash string) error
 	RevokePermission(permissionID uint) error
 	GetUserPermissions(userID uint) ([]models.UserPermission, error)
 }
@@ -66,6 +67,10 @@
 	return s.DB.Create(permission).Error
 }
 
+func (s *GormStore) UpdateUserPassword(userID uint, passwordHash string) error {
+	return s.DB.Model(&models.User{}).Where("id = ?", userID).Update("password_hash", passwordHash).Error
+}
+
 func (s *GormStore) RevokePermission(permissionID uint) error {
 	return s.DB.Delete(&models.UserPermission{}, permissionID).Error
 }
--- a/bfe/main.go
+++ b/bfe/main.go
@@ -61,6 +61,7 @@
 				adminRoutes.GET("/users", handler.ListUsersHandler)
 				adminRoutes.POST("/users", handler.CreateUserHandler)
 				adminRoutes.DELETE("/users/:id", handler.DeleteUserHandler)
+				adminRoutes.POST("/users/:id/password", handler.ResetUserPasswordHandler)
 				adminRoutes.POST("/permissions", handler.AssignPermissionHandler)
 				adminRoutes.DELETE("/permissions/:id", handler.RevokePermissionHandler)
 				adminRoutes.GET("/storage/folders", handler.ListAllFoldersHandler)
--- a/bfe/models/models.go
+++ b/bfe/models/models.go
@@ -41,6 +41,10 @@
 	FolderPrefix string `json:"folder_prefix" binding:"required"`
 }
 
+type ResetPasswordRequest struct {
+	Password string `json:"password" binding:"required"`
+}
+
 type UpdateAdminRequest struct {
 	Username string `json:"username"`
 	Password string `json:"password"`
